AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  recognition-app

  Sample SAM Template for recognition-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs16.x
    Architectures:
      - x86_64

Parameters:
  PhoneNumber:
    Type: String
    Description: Phone number to be notified, when user tries to sign in

Resources:
  AppApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:5173"
        AllowHeaders:
          - Access-Control-Allow-Headers
          - Authorization
          - Content-Type
        AllowMethods:
          - GET
          - PUT
          - DELETE
          - OPTIONS
          - HEAD
          - POST
        MaxAge: 600
        AllowCredentials: true

  AuthResultTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Join ["-", [AuthResultTopic, !Ref AWS::StackName]]
      Subscription:
        - Protocol: sms
          Endpoint: !Ref PhoneNumber

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/hello-world/
      Handler: app.lambdaHandler
      Environment:
        Variables:
          TOPIC: !Ref AuthResultTopic
          REGION: !Ref AWS::Region
      Events:
        Test:
          Type: HttpApi
          Properties:
            Path: /test
            Method: get
            ApiId: !Ref AppApi

  S3AuthorizedImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
            AllowedOrigins:
              - "*"

  S3AuthAttemptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "authbucket-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
            AllowedOrigins:
              - "*"

  RekognitionCollection:
    Type: AWS::Rekognition::Collection
    Properties:
      CollectionId: !Join ["-", [appCollection, !Ref AWS::StackName]]

  AuthorizedPersonsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", [AuthorizedPersons, !Ref AWS::StackName]]
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: IPK
          AttributeType: S
        - AttributeName: ISK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      GlobalSecondaryIndexes:
        - IndexName: GSI
          KeySchema:
            - AttributeName: IPK
              KeyType: HASH
            - AttributeName: ISK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/user/register/
      Handler: app.lambdaHandler
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3AuthorizedImagesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthorizedPersonsTable
        - CloudWatchPutMetricPolicy: {}
        - RekognitionFacesManagementPolicy:
            CollectionId: !Ref RekognitionCollection
        - RekognitionDetectOnlyPolicy: {}
      Environment:
        Variables:
          COLLECTION: !Ref RekognitionCollection
          TABLE_NAME: !Ref AuthorizedPersonsTable
          BUCKET: !Ref S3AuthorizedImagesBucket
      Events:
        RegisterEvent:
          Type: HttpApi
          Properties:
            Path: /user/register
            Method: post
            ApiId: !Ref AppApi

  AuthenticateUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/user/authenticate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthorizedPersonsTable
        - CloudWatchPutMetricPolicy: {}
        - RekognitionFacesManagementPolicy:
            CollectionId: !Ref RekognitionCollection
        - RekognitionDetectOnlyPolicy: {}
      Environment:
        Variables:
          COLLECTION: !Ref RekognitionCollection
          TABLE_NAME: !Ref AuthorizedPersonsTable
      Events:
        RegisterEvent:
          Type: HttpApi
          Properties:
            Path: /user/authenticate
            Method: post
            ApiId: !Ref AppApi

  ListUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/user/list/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AuthorizedPersonsTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref AuthorizedPersonsTable
      Events:
        RegisterEvent:
          Type: HttpApi
          Properties:
            Path: /user
            Method: get
            ApiId: !Ref AppApi

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/user/delete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthorizedPersonsTable
        - CloudWatchPutMetricPolicy: {}
        - RekognitionFacesManagementPolicy:
            CollectionId: !Ref RekognitionCollection
        - S3CrudPolicy:
            BucketName: !Ref S3AuthorizedImagesBucket
      Environment:
        Variables:
          BUCKET: !Ref S3AuthorizedImagesBucket
          TABLE_NAME: !Ref AuthorizedPersonsTable
          COLLECTION: !Ref RekognitionCollection
      Events:
        RegisterEvent:
          Type: HttpApi
          Properties:
            Path: /deleteUser
            Method: delete
            ApiId: !Ref AppApi

  UploadImageRequestFunction:
    Type: AWS::Serverless::Function
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/s3/getUploadUrl/
      Handler: app.lambdaHandler
      Environment:
        Variables:
          BUCKET: !Ref S3AuthAttemptBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3AuthAttemptBucket
      Events:
        UploadAssetAPI:
          Type: HttpApi
          Properties:
            Path: /user/uploads
            Method: get
            ApiId: !Ref AppApi

  TryToAuthenticate:
    Type: AWS::Serverless::Function
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: src/api/s3/onFileUpload/
      Handler: app.lambdaHandler
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - RekognitionDetectOnlyPolicy: {}
        - RekognitionFacesManagementPolicy:
            CollectionId: !Ref RekognitionCollection
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AuthResultTopic.TopicName
        - Statement:
            - Effect: Allow
              Resource: !Sub "arn:aws:s3:::authbucket-${AWS::Region}-${AWS::AccountId}*"
              Action: s3:DeleteObject
      Environment:
        Variables:
          TABLE_NAME: !Ref AuthorizedPersonsTable
          COLLECTION: !Ref RekognitionCollection
          TOPIC: !Ref AuthResultTopic
      Events:
        ImageUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3AuthAttemptBucket
            Events: s3:ObjectCreated:*

Outputs:
  ApiUrl:
    Description: Url f√ºr den Zugriff auf das API-Gateway
    Value: !<!Sub> "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com"
  BucketName:
    Description: "Bucket name:"
    Value: !Ref S3AuthorizedImagesBucket
  PhoneNumber:
    Description: "Phone number"
    Value: !Ref PhoneNumber
